/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface ILendingPoolCollateralManagerInterface
  extends ethers.utils.Interface {
  functions: {
    "liquidationCall(address,address,address,uint256,bool)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "liquidationCall",
    values: [string, string, string, BigNumberish, boolean]
  ): string;

  decodeFunctionResult(
    functionFragment: "liquidationCall",
    data: BytesLike
  ): Result;

  events: {
    "LiquidationCall(address,address,address,uint256,uint256,address,bool)": EventFragment;
    "ReserveUsedAsCollateralDisabled(address,address)": EventFragment;
    "ReserveUsedAsCollateralEnabled(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LiquidationCall"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ReserveUsedAsCollateralDisabled"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ReserveUsedAsCollateralEnabled"
  ): EventFragment;
}

export type LiquidationCallEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber, string, boolean] & {
    collateral: string;
    principal: string;
    user: string;
    debtToCover: BigNumber;
    liquidatedCollateralAmount: BigNumber;
    liquidator: string;
    receiveWvLPToken: boolean;
  }
>;

export type ReserveUsedAsCollateralDisabledEvent = TypedEvent<
  [string, string] & { reserve: string; user: string }
>;

export type ReserveUsedAsCollateralEnabledEvent = TypedEvent<
  [string, string] & { reserve: string; user: string }
>;

export class ILendingPoolCollateralManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ILendingPoolCollateralManagerInterface;

  functions: {
    liquidationCall(
      collateral: string,
      principal: string,
      user: string,
      debtToCover: BigNumberish,
      receiveWvLPToken: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  liquidationCall(
    collateral: string,
    principal: string,
    user: string,
    debtToCover: BigNumberish,
    receiveWvLPToken: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    liquidationCall(
      collateral: string,
      principal: string,
      user: string,
      debtToCover: BigNumberish,
      receiveWvLPToken: boolean,
      overrides?: CallOverrides
    ): Promise<[BigNumber, string]>;
  };

  filters: {
    "LiquidationCall(address,address,address,uint256,uint256,address,bool)"(
      collateral?: string | null,
      principal?: string | null,
      user?: string | null,
      debtToCover?: null,
      liquidatedCollateralAmount?: null,
      liquidator?: null,
      receiveWvLPToken?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, BigNumber, string, boolean],
      {
        collateral: string;
        principal: string;
        user: string;
        debtToCover: BigNumber;
        liquidatedCollateralAmount: BigNumber;
        liquidator: string;
        receiveWvLPToken: boolean;
      }
    >;

    LiquidationCall(
      collateral?: string | null,
      principal?: string | null,
      user?: string | null,
      debtToCover?: null,
      liquidatedCollateralAmount?: null,
      liquidator?: null,
      receiveWvLPToken?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, BigNumber, string, boolean],
      {
        collateral: string;
        principal: string;
        user: string;
        debtToCover: BigNumber;
        liquidatedCollateralAmount: BigNumber;
        liquidator: string;
        receiveWvLPToken: boolean;
      }
    >;

    "ReserveUsedAsCollateralDisabled(address,address)"(
      reserve?: string | null,
      user?: string | null
    ): TypedEventFilter<[string, string], { reserve: string; user: string }>;

    ReserveUsedAsCollateralDisabled(
      reserve?: string | null,
      user?: string | null
    ): TypedEventFilter<[string, string], { reserve: string; user: string }>;

    "ReserveUsedAsCollateralEnabled(address,address)"(
      reserve?: string | null,
      user?: string | null
    ): TypedEventFilter<[string, string], { reserve: string; user: string }>;

    ReserveUsedAsCollateralEnabled(
      reserve?: string | null,
      user?: string | null
    ): TypedEventFilter<[string, string], { reserve: string; user: string }>;
  };

  estimateGas: {
    liquidationCall(
      collateral: string,
      principal: string,
      user: string,
      debtToCover: BigNumberish,
      receiveWvLPToken: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    liquidationCall(
      collateral: string,
      principal: string,
      user: string,
      debtToCover: BigNumberish,
      receiveWvLPToken: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
